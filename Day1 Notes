Setup Guide: https://cctc.cybbh.io/students/students/latest/Day_0_Setup.html 
Python Handbook: https://git.cybbh.space/programming/python/public

10.50.0.0/16
10.50.255.254

ssh student@10.50.38.228 windows_opstation_2tgg
ssh student@10.50.32.226 linux_opstation_2tgg   #Use this one

Python handbook saved to /public/activities

python3
>>> reple

>>> print("Hello world")
Hello world

>>> a = "hello"
>>> a
'hello'

vim .vimrc 

#!/usr/bin/env python3
  
a = "hello"
print(a)

#"type" tells you the class

>>> cosc = '503'
>>> list(cosc)    #lists are mutable, go off zero index
['5', '0', '3']
>>> cosc[0]       #Brackets [] denote the index point
'5'

>>> cosc = list(cosc)    #cosc is being overwritten 
>>> cosc
['5', '0', '3']
>>> cosc[0] = '1'
>>> cosc
['1', '0', '3']
>>> str(cosc)
"['1', '0', '3']"

  >>> tuple('lotr')  >>> tuple('lotr')
('l', 'o', 't', 'r')
>>> tuple('lotr')[-1]
'r'
>>> 'lotr'[-1]
'r'

                  #tuples are like lists but cannot be changed (if asked to return a tuple, typecast into a tuple)
>>> cosc
['1', '0', '3']
>>> del cosc[-1]
>>> cosc
['1', '0']

>>> cosc.append('3')  #append is a function that adds to the end
>>> cosc
['1', '0', '3']

>>> lotr = []         #make list, append
>>> lotr.append('Aragorn')
>>> lotr
['Aragorn']

>>> a = 'Hello'
>>> b = 'world!'
>>> ''
''
>>> '{} {}'.format(a,b)   #.format
'Hello world!'
>>> print('{} {}'.format(a,b))
Hello world!

>>> 'hello world'.split()   #splits on the gap
['hello', 'world']

>>> 'user:passwd'.split(':')    #splits on the :
['user', 'passwd']
>>> 'hello'.split()
['hello']

['user', 'passwd', '/bin/bash']    #.join
>>> ''.join(passwd)
'userpasswd/bin/bash'


*****KMN***** End of day Excercise

#!/usr/bin/env python3

email = 'last@domain.com'
blank = []
a = email.split('@')[0]
b = (email.split('@')[1]).split('.')
blank.append(a)
blank.append(b[0])
blank.append(b[1])

print(blank)

***OR***

#!/usr/bin/env python3
 
email = 'last@domain.com'
print(('.'.join(email.split('@'))).split('.'))

***From CodeWars***

def string_to_array(string):
    return string.split(" ")

def grow(arr):  #For multiplying every piece of an array
	product = 1
	for i in arr:
		product *= i
	return product

def boolean_to_string(b): #Implement a function which convert the given boolean value into its string representation.
    return str(b)

def reverseseq(n): #Build a function that returns an array of integers from n to 1 where n>0
    return list(range(n, 0, -1))

def digitize(n): #Given a random non-negative number, you have to return the digits of this number within an array in reverse order.
    return [int(x) for x in str(n)[::-1]]

def bmi(weight, height):  #
    bmi = weight / height ** 2
    if bmi <= 18.5:
        return "Underweight"
    elif bmi <= 25:
        return "Normal"
    elif bmi <= 30:
        return "Overweight"
    else:
        return "Obese"

# .upper() .lower()

def century(year):  #Given a year, return the century it is in.
    return (year + 99) // 100

def even_or_odd(number):  #Even or Odd
	return 'Odd' if number % 2 else 'Even'

def lovefunc( flower1, flower2 ): #flower petal
    return (flower1+flower2)%2

def make_negative( number ): #make negative
    if number < 0:
        return(number)
    else:
        return(-number)

def set_alarm(employed, vacation): #Truth Table
    return employed==True and vacation==False

def paperwork(n, m):	
    if m<0 or n<0:
        return 0
    else:
        return n*m

def positive_sum(arr): #given an array of numbers, find the sum of all even numbers
    return sum(x for x in arr if x > 0)

def feast(beast, dish): #beast feast
    return beast[0]==dish[0] and dish[-1]==beast[-1]

def lost_sheep(friday,saturday,total): #adding arrays
    return total-(sum(friday)+sum(saturday))

def basic_op(operator, value1, value2):
    if operator=='+':
        return value1+value2
    if operator=='-':
        return value1-value2
    if operator=='/':
        return value1/value2
    if operator=='*':
        return value1*value2

def longest(a1, a2): #sorting two number lists
    return "".join(sorted(set(a1 + a2)))

def name_value(my_list): #abc 
  result = []
  for i in range(len(my_list)):
      subtotal = 0
      for c in my_list[i]:
          if(c != ' '):
              subtotal += ord(c) - ord('a') + 1
      result.append(subtotal*(i+1))
  return result

def max_multiple(divisor, bound):
    return bound // divisor * divisor

def first_n_multiples(x, n): # Create a function with two arguments that will return an array of the first n multiples of x
    multiples = []
    for i in range(1, n+1):
        multiples.append(x * i)
    return multiples

def rps(p1, p2): #Rock paper scissors
    beats = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}
    if beats[p1] == p2:
        return "Player 1 won!"
    if beats[p2] == p1:
        return "Player 2 won!"
    return "Draw!"
